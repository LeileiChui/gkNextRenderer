#version 460
#extension GL_ARB_gpu_shader_int64 : require
#extension GL_ARB_shader_clock : require
#extension GL_GOOGLE_include_directive : require
#extension GL_EXT_ray_tracing : require

#include "Heatmap.glsl"
#include "Random.glsl"
#include "RayPayload.glsl"
#include "UniformBufferObject.glsl"

layout(binding = 0, set = 0) uniform accelerationStructureEXT Scene;
layout(binding = 1, rgba32f) uniform image2D AccumulationImage;
layout(binding = 2, rg16f) uniform image2D MotionVectorImage;
layout(binding = 3) readonly uniform UniformBufferObjectStruct { UniformBufferObject Camera; };
layout(binding = 10, rgba32f) uniform image2D GBufferImage;
layout(binding = 11, rgba16f) uniform image2D Output1Image;
layout(binding = 12, rgba16f) uniform image2D AlbedoImage;

layout(location = 0) rayPayloadEXT RayPayload Ray;

void main() 
{
	// use checkerbord to skip sample
	int adder = Camera.TotalFrames % 2 == 0 ? 1 : 0;
	
	ivec2 ipos = ivec2(gl_LaunchIDEXT.xy);
	vec2 isize = vec2(gl_LaunchSizeEXT.xy);

	if(Camera.UseCheckerBoard)
	{
		ipos = ipos * ivec2(2,1);
		isize = isize * vec2(2,1);
		if((gl_LaunchIDEXT.y + adder) % 2 == 0) 
		{
			ipos.x += 1;
		}
	}
    
	const uint64_t clock = Camera.ShowHeatmap ? clockARB() : 0;

	// Initialise separate random seeds for the pixel and the rays.
	// - pixel: we want the same random seed for each pixel to get a homogeneous anti-aliasing.
	// - ray: we want a noisy random seed, different for each pixel.
	uint pixelRandomSeed = Camera.RandomSeed;
    vec2 uvOffset = vec2(RandomFloat(pixelRandomSeed), RandomFloat(pixelRandomSeed)) / isize;
	Ray.RandomSeed = InitRandomSeed(InitRandomSeed(ipos.x, ipos.y), Camera.TotalFrames);
    
    const vec3 exitColor = vec3(0.0);
	vec3 pixelColor = vec3(0);
	
	// Accumulate all the rays for this pixels.
	
	for (uint s = 0; s < Camera.NumberOfSamples; ++s)
	{
		const vec2 pixel = vec2(ipos);
		vec2 uv = (pixel / isize) * 2.0 - 1.0;
		
		// anti aliasing
        {
            uv += uvOffset;
        }

		vec2 offset = Camera.Aperture / 2 * RandomInUnitDisk(Ray.RandomSeed);
		vec4 origin = Camera.ModelViewInverse * vec4(offset, 0, 1);
		vec4 target = Camera.ProjectionInverse * (vec4(uv.x, uv.y, 1, 1));
        // physical camera
		vec4 direction = Camera.ModelViewInverse * vec4(normalize(target.xyz * Camera.FocusDistance * 0.01 - vec3(offset, 0)), 0);
		vec3 rayColor = vec3(1);

		uint initialRayCount = Camera.NumberOfBounces;
		// Ray scatters are handled in this loop. There are no recursive traceRayEXT() calls in other shaders.
		for (uint b = 0; b <= initialRayCount; ++b)
		{
			const float tMin = 0.001;
			const float tMax = 10000.0;

			// If we've exceeded the ray bounce limit without hitting a light source, no light is gathered.
			// Light emitting materials never scatter in this implementation, allowing us to make this logical shortcut.
			if (b == initialRayCount) 
			{
				rayColor = exitColor;
				break;
			}

			Ray.BounceCount = b;
			Ray.GBuffer = vec4(0,1,0,0);
			Ray.ScatterDirection = vec4(0,1,0,1);
			traceRayEXT(
				Scene, gl_RayFlagsOpaqueEXT, 0xff, 
				0 /*sbtRecordOffset*/, 0 /*sbtRecordStride*/, 0 /*missIndex*/, 
				origin.xyz, tMin, direction.xyz, tMax, 0 /*payload*/);
			
			const vec3 hitColor = Ray.ColorAndDistance.rgb;
			const float t = Ray.ColorAndDistance.w;
			const bool isScattered = Ray.ScatterDirection.w > 0;

			

            if(b == 0)
            {
                // output gbuffer
                imageStore(GBufferImage, ipos, vec4(Ray.GBuffer.xyz, t) );
				vec3 history = imageLoad(AlbedoImage, ipos).rgb;
				// the first albedo, pbr with monte carlo, so still noisy, this can be use appoximate algo to disable it
				// but the problem is, who to let the hit shader to know this is the first bounce
				//imageStore(AlbedoImage, ipos, vec4(mix(Ray.ColorAndDistance.rgb, history, 0.95), 1));
				imageStore(AlbedoImage, ipos, vec4(Ray.ColorAndDistance.rgb, 1));
				
				
				// output motion vector
				// calculate the motion vector
				vec2 size = imageSize(MotionVectorImage);
				vec4 WorldPos = origin + t * direction;
                vec4 currFrameHPos = Camera.ViewProjection * vec4(WorldPos.xyz, 1);
                vec2 currfpos = vec2((currFrameHPos.xy / currFrameHPos.w * 0.5 + 0.5) * vec2(size));
                
                vec4 prevFrameHPos = Camera.PrevViewProjection * vec4(WorldPos.xyz, 1);
                vec2 prevfpos = vec2((prevFrameHPos.xy / prevFrameHPos.w * 0.5 + 0.5) * vec2(size));
                vec2 motion = prevfpos - currfpos;
                imageStore(MotionVectorImage, ipos, vec4(motion,0,0));
	            //MotionVectorImage
            }
			else
			{
				rayColor *= hitColor;
			}
			
			if(!isScattered)
			{
				rayColor = exitColor;
			}

			// Trace missed, or end of trace.
			if (t < 0 || !isScattered)
			{				
				break;
			}

			initialRayCount += Ray.AdaptiveRay;
			initialRayCount = min(16, initialRayCount);
			// Trace hit.
			origin = origin + t * direction;
			direction = vec4(Ray.ScatterDirection.xyz, 0);
		}

		pixelColor += rayColor;
	}
    
    pixelColor = pixelColor / Camera.NumberOfSamples;
    /*
    vec3 accumulatedColor = vec3(0);
	
	if( Camera.TotalNumberOfSamples >  Camera.NumberOfSamples )
	{
		accumulatedColor = imageLoad(AccumulationImage, ipos).xyz;
	}
	
    if(Camera.TemporalFrames == 0)
    {
		// offline render style
	    accumulatedColor = accumulatedColor + pixelColor * (Camera.UseCheckerBoard ? 2.0 : 1.0);
	    pixelColor = accumulatedColor / Camera.TotalNumberOfSamples;
    }
    else
    {
        // realtime game style
        float currKeep = 1.0 / Camera.TemporalFrames;
        pixelColor = pixelColor / Camera.NumberOfSamples;
        accumulatedColor = accumulatedColor * (1.0 - currKeep) + pixelColor * currKeep;
        pixelColor = accumulatedColor;
    }
	*/

	// Apply raytracing-in-one-weekend gamma correction.
	//pixelColor = sqrt(pixelColor);

	if (Camera.ShowHeatmap)
	{
		const uint64_t deltaTime = clockARB() - clock;
		const float heatmapScale = 1000000.0f * Camera.HeatmapScale * Camera.HeatmapScale;
		const float deltaTimeScaled = clamp(float(deltaTime) / heatmapScale, 0.0f, 1.0f);

		pixelColor = heatmap(deltaTimeScaled);
	}

	// output to accumulation directly
	imageStore(AccumulationImage, ipos, vec4(pixelColor, 0));
}
