#version 460
#extension GL_GOOGLE_include_directive : require

#include "UniformBufferObject.glsl"

layout(binding = 0, rgba16f) uniform image2D Final0Image;
layout(binding = 1, rgba16f) uniform image2D Final1Image;
layout(binding = 2, rgba16f) uniform image2D AlbedoImage;
layout(binding = 3, rgba8) uniform image2D OutImage;
layout(binding = 4) readonly uniform UniformBufferObjectStruct { UniformBufferObject Camera; };
layout(binding = 5, rg16f) uniform image2D MotionVectorImage;

layout(push_constant) uniform PushConsts {
    uint pingpong;
    uint stepsize;
} pushConsts;

layout(local_size_x = 8, local_size_y = 4, local_size_z = 1) in;

const float kMaxNitsFor2084  = 10000.0f;
const float paper_white_nits  = 500.0f;

vec3 LinearToST2084UE(vec3 lin)
{
    const float m1 = 0.1593017578125; // = 2610. / 4096. * .25;
    const float m2 = 78.84375; // = 2523. / 4096. *  128;
    const float c1 = 0.8359375; // = 2392. / 4096. * 32 - 2413./4096.*32 + 1;
    const float c2 = 18.8515625; // = 2413. / 4096. * 32;
    const float c3 = 18.6875; // = 2392. / 4096. * 32;
    const float C = 10000.;

    vec3 L = lin/C;
    vec3 Lm = pow(L, vec3(m1));
    vec3 N1 = ( c1 + c2 * Lm );
    vec3 N2 = ( 1.0 + c3 * Lm );
    vec3 N = N1 * (1.0 / N2);
    vec3 P = pow( N, vec3(m2) );

    return P;
}

vec3 NormalizeHDRSceneValue(vec3 hdrSceneValue)
{
    return hdrSceneValue * paper_white_nits / kMaxNitsFor2084;
}

vec3 LinearToST2084(vec3 normalizedLinearValue)
{
    vec3 ST2084 = pow((0.8359375f + 18.8515625f * pow(abs(normalizedLinearValue), vec3(0.1593017578f))) / (1.0f + 18.6875f * pow(abs(normalizedLinearValue), vec3(0.1593017578f))), vec3(78.84375f));
    return ST2084;  /* Don't clamp between [0..1], so we can still perform operations on scene values higher than 10,000 nits */
}

const mat3 k709to2020 = mat3 (
    0.6274040f, 0.3292820f, 0.0433136f,
    0.0690970f, 0.9195400f, 0.0113612f,
    0.0163916f, 0.0880132f, 0.8955950f);

const mat3 kExpanded709to2020 = mat3 (
    0.6274040f,  0.3292820f, 0.0433136f,
    0.0457456f,  0.941777f,  0.0124772f,
    -0.00121055f, 0.0176041f, 0.983607f);

vec3 ConvertLinearToHDR10(vec3 hdr)
{
    //vec3 rec2020 = hdr * k709to2020;
    //if (settings.expand_gamut > 0.0f)
    //rec2020 = hdr * kExpanded709to2020;

    vec3 linearColour = NormalizeHDRSceneValue(hdr);
    return LinearToST2084(linearColour);
}

void main() {
    ivec2 ipos = ivec2(gl_GlobalInvocationID.xy);

    // simple compose together
    vec4 final = pushConsts.pingpong == 0 ? imageLoad(Final1Image, ipos) : imageLoad(Final0Image, ipos);
    vec4 albedo = imageLoad(AlbedoImage, ipos);

    // normalize the value, our lighting almost goes to 10, so * 0.08 equals to 0.8, the is 1600nit in PQ, which is the peak
    //final *= 0.08;
    // for peak 700nit
    //final *= 0.07;

    //final = final * 60;
    
    imageStore(OutImage, ipos, vec4( LinearToST2084UE(final.rgb), 1.0));

    //vec4 motion = clamp(imageLoad(MotionVectorImage, ipos) / 1.f, -1.0f, 1.0f);// * 0.5f + 0.5f;
    //imageStore(OutImage, ipos, vec4(motion.rg,0,0));
    //imageStore(OutImage, ipos, sqrt(albedo));
}