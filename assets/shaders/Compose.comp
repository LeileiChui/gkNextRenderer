#version 460
#extension GL_GOOGLE_include_directive : require

#include "UniformBufferObject.glsl"

layout(binding = 0, rgba16f) uniform image2D Final0Image;
layout(binding = 1, rgba16f) uniform image2D Final1Image;
layout(binding = 2, rgba16f) uniform image2D AlbedoImage;
layout(binding = 3, rgba8) uniform image2D OutImage;
layout(binding = 4) readonly uniform UniformBufferObjectStruct { UniformBufferObject Camera; };
layout(binding = 5, rg16f) uniform image2D MotionVectorImage;

layout(push_constant) uniform PushConsts {
    uint pingpong;
    uint stepsize;
} pushConsts;

layout(local_size_x = 8, local_size_y = 4, local_size_z = 1) in;

const float kMaxNitsFor2084  = 10000.0f;
const float paper_white_nits  = 500.0f;

vec3 LinearToST2084UE(vec3 lin)
{
    const float m1 = 0.1593017578125; // = 2610. / 4096. * .25;
    const float m2 = 78.84375; // = 2523. / 4096. *  128;
    const float c1 = 0.8359375; // = 2392. / 4096. * 32 - 2413./4096.*32 + 1;
    const float c2 = 18.8515625; // = 2413. / 4096. * 32;
    const float c3 = 18.6875; // = 2392. / 4096. * 32;
    const float C = 10000.;

    vec3 L = lin/C;
    vec3 Lm = pow(L, vec3(m1));
    vec3 N1 = ( c1 + c2 * Lm );
    vec3 N2 = ( 1.0 + c3 * Lm );
    vec3 N = N1 * (1.0 / N2);
    vec3 P = pow( N, vec3(m2) );

    return P;
}

void main() {
    ivec2 ipos = ivec2(gl_GlobalInvocationID.xy);

    // simple compose together
    vec4 final = pushConsts.pingpong == 0 ? imageLoad(Final1Image, ipos) : imageLoad(Final0Image, ipos);
    vec4 albedo = imageLoad(AlbedoImage, ipos);
    
    imageStore(OutImage, ipos, vec4( LinearToST2084UE(final.rgb * Camera.PaperWhiteNit / 230.0), 1.0));
    
}