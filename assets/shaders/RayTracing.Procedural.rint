#version 460
#extension GL_GOOGLE_include_directive : require
#extension GL_EXT_ray_tracing : require

layout(binding = 9) readonly buffer SphereArray { vec4[] Spheres; };

hitAttributeEXT vec4 Sphere;

#include "common/Const_Func.glsl"

void main()
{
	const vec4 sphere = Spheres[gl_InstanceCustomIndexEXT];
	const vec3 center = sphere.xyz;
	const float radius = sphere.w;
	
	const vec3 origin = gl_WorldRayOriginEXT;
	const vec3 direction = gl_WorldRayDirectionEXT;
	const float tMin = gl_RayTminEXT;
	const float tMax = gl_RayTmaxEXT;

	// https://en.wikipedia.org/wiki/Quadratic_formula

	const vec3 oc = origin - center;
	const vec3 oc_direction = to_local(oc, direction, oc, vec3(0));	//result same as vec3 to_local(vec3 v, vec3 T, vec3 B, vec3 N) { return vec3(dot(v, T), dot(v, B), dot(v, N)); } but faster than 3 dots
	const float b = -oc_direction.x;
	float discriminant = b * b - oc_direction.y + radius * radius;

	if (discriminant >= 0)
	{
		discriminant = sqrt(discriminant);
		const float t1 = b - discriminant;
		const float t2 = b + discriminant;

		if ((tMin <= t1 && t1 < tMax) || (tMin <= t2 && t2 < tMax))
		{
			Sphere = sphere;
			reportIntersectionEXT((tMin <= t1 && t1 < tMax) ? t1 : t2, 0);
		}
	}
}

