#version 460
#extension GL_GOOGLE_include_directive : require
#extension GL_EXT_ray_query : require
#include "Platform.glsl"
#include "common/Const_Func.glsl"
#include "common/Material.glsl"
#include "common/UniformBufferObject.h"
#include "common/Random.glsl"

// placed me in a 200 x 200 x 100 grid, total 4,000,000 cubes, total size 4,000,000 * 6 * 4 * 4 = 384 MB
// it the gap is 10 cm, it will cover 20 x 20 x 10 meters area

// for basic testing demo, we use 50 x 50 x 50 to represent 5 x 5 x 5 meters area, the default cornell box is 5 x 5 x 5 meters
// it may simple gen every frame

// we use 128 ray per cube, it can accumulate with last 16 frames

// every cube face, tracing a hemisphere uniformly

// the basic algorithm
// 1. get the area center
// 2. get the tracing origin
// 3. tracing the ray, only get the visibiliy for the first iteration
// 4. record to storage buffer

// when shading
// 1. sample the ambient cube with world pos, lerp in 3d, get the color as indirect light
// 2. tracing direct reflection

// when area center moving
// 1. move still in bound cubes, then update new cubes

layout(binding = 0, set = 0) uniform accelerationStructureEXT Scene;
layout(binding = 1) buffer AmbientCubeArray { AmbientCube[] Cubes; };
layout(binding = 2) readonly buffer LightObjectArray { LightObject[] Lights; };
layout(binding = 3) readonly uniform UniformBufferObjectStruct { UniformBufferObject Camera; };
layout(binding = 4) readonly buffer VertexArray { float Vertices[]; };
layout(binding = 5) readonly buffer IndexArray { uint Indices[]; };
layout(binding = 6) readonly buffer MaterialArray { Material[] Materials; };
layout(binding = 7) readonly buffer OffsetArray { uvec2[] Offsets; };
layout(binding = 8) readonly buffer NodeProxyArray { NodeProxy[] NodeProxies; };

layout(set = 1, binding = 0) uniform sampler2D TextureSamplers[];

layout(push_constant) uniform PushConsts {
    uint globalOffset;
    uint unitSize;
} pushConsts;

#include "common/RTSimple.glsl"
#include "common/AmbientCube.glsl"

#if DESKTOP
layout(local_size_x = 32, local_size_y = 1, local_size_z = 1) in;
#else
layout(local_size_x = 1024, local_size_y = 1, local_size_z = 1) in;
#endif



const uint FACE_TRACING = 8;

int TraceLight(vec3 origin, vec3 lightPos)
{
    float dist = length(lightPos - origin);
    vec3 lightDir = (lightPos - origin) / dist;
    rayQueryEXT rayQuery;
    rayQueryInitializeEXT(rayQuery, Scene, gl_RayFlagsTerminateOnFirstHitEXT, 0xFF, origin, EPS, lightDir, dist - EPS2);

    rayQueryProceedEXT(rayQuery);

    if (rayQueryGetIntersectionTypeEXT(rayQuery, true) == gl_RayQueryCommittedIntersectionTriangleEXT) {
        return 0;
    }
    else
    {
        return 1;
    }
}

int TraceShadow(vec3 origin, vec3 lightPos)
{
    if( !Camera.HasSun )
    {
        return 0;
    }

    return TraceLight(origin, lightPos);
}


vec4 TraceOcclusion(inout uvec4 RandomSeed, vec3 origin, vec3 basis, inout int activeProbe)
{
    float occlusion = 0.0;
    float hitDist = 0.0;
    float hitCount = 0.000001;
    vec3 rayColor = vec3(0.0);
    
    for( uint i = 0; i < FACE_TRACING; i++ )
    {
        vec3 rayDir = AlignWithNormal( RandomInHemiSphere1(RandomSeed), basis );

        rayQueryEXT rayQuery;
        rayQueryInitializeEXT(rayQuery, Scene, gl_RayFlagsNoneEXT, 0xFF, origin.xyz, EPS, rayDir, 10.0f);
        
        while( rayQueryProceedEXT(rayQuery) )
        {

        }

        if (rayQueryGetIntersectionTypeEXT(rayQuery, true) == gl_RayQueryCommittedIntersectionTriangleEXT  ) {
            const bool IsCommitted = true;
            const int InstCustIndex = rayQueryGetIntersectionInstanceCustomIndexEXT(rayQuery, IsCommitted);
            const float RayDist = rayQueryGetIntersectionTEXT(rayQuery, IsCommitted);
            const mat4x3 WorldToObject = rayQueryGetIntersectionWorldToObjectEXT(rayQuery, IsCommitted);
            const vec2 TwoBaryCoords = rayQueryGetIntersectionBarycentricsEXT(rayQuery, IsCommitted);
            const int PrimitiveIndex = rayQueryGetIntersectionPrimitiveIndexEXT(rayQuery, IsCommitted);
            const int InstanceID = rayQueryGetIntersectionInstanceIdEXT(rayQuery, IsCommitted);

            vec3 OutNormal;
            vec2 OutTexcoord;
            uint OutMaterialId;
            uint OutInstanceId;
            SimpleHit(InstCustIndex, WorldToObject, TwoBaryCoords, PrimitiveIndex, InstanceID, OutNormal, OutTexcoord, OutMaterialId, OutInstanceId);

            // if hit backface
            if( dot(OutNormal, rayDir) < 0.0 )
            {
                int shadow = TraceShadow(origin + rayDir * RayDist, origin + rayDir * RayDist + Camera.SunDirection.xyz * 1000.f);
                //int shadow = 0;
                const Material material = Materials[OutMaterialId];
                occlusion += 1.0;
                hitDist += RayDist;
                hitCount += 1;
                rayColor += clamp(material.Diffuse.rgb, 0, 1) * ( shadow > 0 ? 3.0 : 0.5);// * clamp( 1.0 - RayDist / 10.0, 0.0, 1.0);
            }
            else
            {
                hitDist = 0.0;
                hitCount = 1;
                activeProbe = 0;
                break;
            }
        }
        else
        {
            hitDist += 1000.0;
            hitCount += 1;
            occlusion += 0.0;
            // should sample from ibl
            rayColor += rayDir.y > 0 ? vec3(0.6, 0.6, 0.6) : vec3(0.0, 0.0, 0.0);
        }
    }
    rayColor = rayColor / float(FACE_TRACING);
    
    if(Camera.LightCount > 0)
    {
        vec3 lightPos = mix(Lights[0].p1.rgb, Lights[0].p3.rgb, 0.5f);
        float lightAtten = TraceLight(origin, lightPos);

        vec3 lightDir = normalize(lightPos - origin);
        float ndotl = clamp(dot(basis, lightDir), 0.0f, 1.0f);
        float distance = length(lightPos - origin);
        float attenuation = 40.0f / (distance * distance);
        rayColor += vec3(0.6f, 0.6f, 0.6f) * ndotl * attenuation * lightAtten;
    }
    
    float avgDist = hitDist / hitCount;
    vec4 indirectColor = vec4(rayColor, avgDist);
    return indirectColor;
}

void main() {
    uint gIdx = gl_GlobalInvocationID.x + pushConsts.globalOffset;
    
    // convert to local position
    uint y = gIdx / (CUBE_SIZE_XY * CUBE_SIZE_XY);
    uint z = (gIdx - y * CUBE_SIZE_XY * CUBE_SIZE_XY) / CUBE_SIZE_XY;
    uint x = gIdx - y * CUBE_SIZE_XY * CUBE_SIZE_XY - z * CUBE_SIZE_XY;

    uvec4 RandomSeed = InitRandomSeed(x + y, y + z, Camera.TotalFrames);
    vec3 origin = vec3(x, y, z) * CUBE_UNIT + CUBE_OFFSET;
    
    int activeProbe = 1;
    Cubes[gIdx].PosY = LerpPackedColorAlt(Cubes[gIdx].PosY, TraceOcclusion(RandomSeed, origin, vec3(0,1,0), activeProbe),  0.08);
    Cubes[gIdx].NegY = LerpPackedColorAlt(Cubes[gIdx].NegY, TraceOcclusion(RandomSeed, origin, vec3(0,-1,0), activeProbe), 0.08);
    Cubes[gIdx].PosX = LerpPackedColorAlt(Cubes[gIdx].PosX, TraceOcclusion(RandomSeed, origin, vec3(1,0,0), activeProbe),  0.08);
    Cubes[gIdx].NegX = LerpPackedColorAlt(Cubes[gIdx].NegX, TraceOcclusion(RandomSeed, origin, vec3(-1,0,0), activeProbe), 0.08);
    Cubes[gIdx].PosZ = LerpPackedColorAlt(Cubes[gIdx].PosZ, TraceOcclusion(RandomSeed, origin, vec3(0,0,1), activeProbe),  0.08);
    Cubes[gIdx].NegZ = LerpPackedColorAlt(Cubes[gIdx].NegZ, TraceOcclusion(RandomSeed, origin, vec3(0,0,-1), activeProbe), 0.08);
    
    Cubes[gIdx].Info.x = activeProbe;
    Cubes[gIdx].Info.y = TraceShadow(origin, origin + Camera.SunDirection.xyz * 1000.f);
}
