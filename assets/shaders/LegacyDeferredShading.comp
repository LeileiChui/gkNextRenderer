#version 460
#extension GL_GOOGLE_include_directive : require
#extension GL_EXT_nonuniform_qualifier : require

#include "Material.glsl"
#include "UniformBufferObject.glsl"

layout(binding = 0, rgba8) uniform image2D GBuffer0Image;
layout(binding = 1, rgba8) uniform image2D GBuffer1Image;
layout(binding = 2, rgba8) uniform image2D GBuffer2Image;
layout(binding = 3, rgba8) uniform image2D OutImage;
layout(binding = 4) readonly uniform UniformBufferObjectStruct { UniformBufferObject Camera; };

//layout(push_constant) uniform PushConsts {
//    uint pingpong;
//    uint stepsize;
//} pushConsts;

layout(local_size_x = 8, local_size_y = 4, local_size_z = 1) in;

void main() {

    // checker box
    int adder = Camera.TotalFrames % 2 == 0 ? 1 : 0;
    
    ivec2 ipos = ivec2(gl_GlobalInvocationID.xy);
    if(Camera.UseCheckerBoard)
    {
        ipos = ipos * ivec2(2,1);
        if((gl_GlobalInvocationID.y + adder) % 2 == 0) {
            ipos.x += 1;
        }
    }
	
    vec4 albedo = imageLoad(GBuffer0Image, ipos);
    vec4 normal = imageLoad(GBuffer1Image, ipos);
    
    const vec3 lightVector = normalize(vec3(5, 4, 3));
    const float d = max(dot(lightVector, normalize(normal.rgb)), 0.2);

    vec4 outColor = sqrt(albedo * d);
    
    imageStore(OutImage, ipos, outColor);
}