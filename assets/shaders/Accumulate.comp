#version 460
#extension GL_GOOGLE_include_directive : require

#include "UniformBufferObject.glsl"

layout(binding = 0, rgba16f) uniform image2D NewSourceImage;
layout(binding = 1, rgba16f) uniform image2D AccumulateImage;
layout(binding = 2, rgba16f) uniform image2D Accumulate1Image;
layout(binding = 3, rg16f) uniform image2D MotionVectorImage;
layout(binding = 4) readonly uniform UniformBufferObjectStruct { UniformBufferObject Camera; };

layout(local_size_x = 8, local_size_y = 4, local_size_z = 1) in;

// a simple accumulation shader, reproject can impl here later.
void main() {
    ivec2 ipos = ivec2(gl_GlobalInvocationID.xy);

    vec2 motion = imageLoad(MotionVectorImage, ipos).rg;
    vec4 src = imageLoad(NewSourceImage, ipos);
    
    ivec2 previpos = clamp(ivec2( floor(ipos + motion + vec2(0.5)) ), ivec2(0), ivec2(imageSize(AccumulateImage) - ivec2(1)));
    

    vec4 history = Camera.TotalFrames % 2 == 0 ? imageLoad(AccumulateImage, previpos) : imageLoad(Accumulate1Image, previpos);
    float currKeep = 1.0 / max(1, Camera.TemporalFrames);

    if(Camera.TotalFrames % 2 == 0 )
    {
        imageStore(Accumulate1Image, ipos, mix(history , src, currKeep));
        //imageStore(Accumulate1Image, ipos, vec4(motion, 0, 0));
    }
    else
    {
        imageStore(AccumulateImage, ipos, mix(history , src, currKeep));
        //imageStore(AccumulateImage, ipos, vec4(motion, 0, 0));
    }
}