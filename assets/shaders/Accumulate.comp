#version 460
#extension GL_GOOGLE_include_directive : require
#include "Platform.glsl"
#include "common/UniformBufferObject.glsl"
#include "common/Const_Func.glsl"
#include "common/ColorFunc.glsl"

layout(binding = 0, rgba16f) uniform image2D NewSourceImage;
layout(binding = 1, rgba16f) uniform image2D AccumulateImage;
layout(binding = 2, rgba16f) uniform image2D Accumulate1Image;
layout(binding = 3, rg32f) uniform image2D MotionVectorImage;
layout(binding = 4) readonly uniform UniformBufferObjectStruct { UniformBufferObject Camera; };

layout(binding = 5, r32ui) uniform uimage2D VisibilityBuffer;
layout(binding = 6, r32ui) uniform uimage2D Visibility1Buffer;
layout(binding = 7, rgba8) uniform image2D OutImage;

layout(local_size_x = 8, local_size_y = 4, local_size_z = 1) in;

uint FetchPrimitiveIndex(in uint InstanceID)
{
	return InstanceID;
}

bool EdgeDetect(in uint current_primitive_index, in bool isEvenFrame, in ivec2 ipos)
{
	uint center = FetchPrimitiveIndex(current_primitive_index);
	
	uint prev_primitive_index0 = FetchPrimitiveIndex(isEvenFrame ? imageLoad(VisibilityBuffer, ipos + ivec2(2,0)).r : imageLoad(Visibility1Buffer, ipos + ivec2(2,0)).r);
	uint prev_primitive_index1 = FetchPrimitiveIndex(isEvenFrame ? imageLoad(VisibilityBuffer, ipos + ivec2(-2,0)).r : imageLoad(Visibility1Buffer, ipos + ivec2(-2,0)).r);
	uint prev_primitive_index2 = FetchPrimitiveIndex(isEvenFrame ? imageLoad(VisibilityBuffer, ipos + ivec2(0, 2)).r : imageLoad(Visibility1Buffer, ipos + ivec2(0, 2)).r);
	uint prev_primitive_index3 = FetchPrimitiveIndex(isEvenFrame ? imageLoad(VisibilityBuffer, ipos + ivec2(0, -2)).r : imageLoad(Visibility1Buffer, ipos + ivec2(0, -2)).r);

	bool edge0 = any( notEqual( uvec4(prev_primitive_index0, prev_primitive_index1, prev_primitive_index2, prev_primitive_index3), uvec4(center) ));
	bool edge1 = any( equal( uvec4(prev_primitive_index0, prev_primitive_index1, prev_primitive_index2, prev_primitive_index3), uvec4(center) ));

	return edge0 && edge1;
}

// a simple accumulation shader, reproject can impl here later.
void main() {
    ivec2 ipos = ivec2(gl_GlobalInvocationID.xy) + ivec2(Camera.ViewportRect.x, Camera.ViewportRect.y);

    vec4 src = imageLoad(NewSourceImage, ipos);

    bool isEvenFrame = Camera.TotalFrames % 2 == 0 ? true : false;

    bool useHistory = true;
    vec4 final = src;
    vec2 motion = imageLoad(MotionVectorImage, ipos).rg;
	ivec2 previpos = ivec2( floor(ipos + motion) );
	const bool inside = all(lessThan(previpos, ivec2(Camera.ViewportRect.xy + Camera.ViewportRect.zw))) && all(greaterThanEqual(previpos, ivec2(Camera.ViewportRect.xy) + ivec2(-1,-1)));
	// 以前的稳定，是一种偶然，当相机不动的时候，我们假设不check，所以都是直接用histroy，但是在边缘的位置，总会有闪烁。这种闪烁因为motion归0而消除，这是不对的
	// after, motionvector calculate last frame position
	// 当前uv直接执行id比对，如果不同，直接check
	uint current_primitive_index0 = isEvenFrame ? imageLoad(VisibilityBuffer, ipos).r : imageLoad(Visibility1Buffer, ipos).r;
	uint prev_primitive_index0 = isEvenFrame ? imageLoad(Visibility1Buffer, previpos).r : imageLoad(VisibilityBuffer, previpos).r;
	const bool changed = current_primitive_index0 != prev_primitive_index0 ? true : false;
    const bool check = (length(motion) > 0.01) ? true : false;
    // fetch visibility to validate the history
    
	const bool miss = current_primitive_index0 == 65535 ? true : false;
    if(miss || Camera.TotalFrames == 0 || !inside)
    {
        useHistory = false;
    }

    if( useHistory )
    {
		if( !Camera.Benchmark )
		{
			uint current_primitive_index1 = isEvenFrame ? imageLoad(VisibilityBuffer, ipos + ivec2(1,0)).r : imageLoad(Visibility1Buffer, ipos + ivec2(1,0)).r;
			uint current_primitive_index2 = isEvenFrame ? imageLoad(VisibilityBuffer, ipos + ivec2(0,1)).r : imageLoad(Visibility1Buffer, ipos + ivec2(0,1)).r;
			uint current_primitive_index3 = isEvenFrame ? imageLoad(VisibilityBuffer, ipos + ivec2(1,1)).r : imageLoad(Visibility1Buffer, ipos + ivec2(1,1)).r;
			
			uint current_total = current_primitive_index0 + current_primitive_index1 + current_primitive_index2 + current_primitive_index3;
			
			// prev frame around
			uint prev_primitive_index1 = isEvenFrame ? imageLoad(Visibility1Buffer, previpos + ivec2(1,0)).r : imageLoad(VisibilityBuffer, previpos + ivec2(1,0)).r;
			uint prev_primitive_index2 = isEvenFrame ? imageLoad(Visibility1Buffer, previpos + ivec2(0,1)).r : imageLoad(VisibilityBuffer, previpos + ivec2(0,1)).r;
			uint prev_primitive_index3 = isEvenFrame ? imageLoad(Visibility1Buffer, previpos + ivec2(1,1)).r : imageLoad(VisibilityBuffer, previpos + ivec2(1,1)).r;

			uint prev_primitive_index4 = isEvenFrame ? imageLoad(Visibility1Buffer, previpos + ivec2(-1,0)).r : imageLoad(VisibilityBuffer, previpos + ivec2(-1,0)).r;
			uint prev_primitive_index5 = isEvenFrame ? imageLoad(Visibility1Buffer, previpos + ivec2(0,-1)).r : imageLoad(VisibilityBuffer, previpos + ivec2(0,-1)).r;
			uint prev_primitive_index6 = isEvenFrame ? imageLoad(Visibility1Buffer, previpos + ivec2(-1,-1)).r : imageLoad(VisibilityBuffer, previpos + ivec2(-1,-1)).r;

			uint prev_primitive_index7 = isEvenFrame ? imageLoad(Visibility1Buffer, previpos + ivec2(1,-1)).r : imageLoad(VisibilityBuffer, previpos + ivec2(1,-1)).r;
			uint prev_primitive_index8 = isEvenFrame ? imageLoad(Visibility1Buffer, previpos + ivec2(-1,1)).r : imageLoad(VisibilityBuffer, previpos + ivec2(-1,1)).r;

			uint prev_total = prev_primitive_index0 + prev_primitive_index1 + prev_primitive_index2 + prev_primitive_index3;
			
			
			bool miss1 = all( notEqual( uvec4(prev_primitive_index0, prev_primitive_index1, prev_primitive_index2, prev_primitive_index3), uvec4(current_primitive_index0, current_primitive_index0, current_primitive_index0, current_primitive_index0) ));
			bool miss2 = all( notEqual( uvec4(prev_primitive_index4, prev_primitive_index5, prev_primitive_index6, prev_primitive_index7), uvec4(current_primitive_index0, current_primitive_index0, current_primitive_index0, current_primitive_index0) ));
			bool miss3 = prev_primitive_index8 != current_primitive_index0 ? true : false;
			bool miss = miss1 && miss2 && miss3;
			bool missMotion = current_total != prev_total ? true : false;
			if( check ? missMotion : miss )
			{
				useHistory = false;
			}
		}

		if(useHistory)
		{
			vec4 history0 = isEvenFrame ? imageLoad(AccumulateImage, previpos) : imageLoad(Accumulate1Image, previpos);
			vec4 history1 = isEvenFrame ? imageLoad(AccumulateImage, previpos + ivec2(1,0)) : imageLoad(Accumulate1Image, previpos + ivec2(1,0));
			vec4 history2 = isEvenFrame ? imageLoad(AccumulateImage, previpos + ivec2(0,1)) : imageLoad(Accumulate1Image, previpos + ivec2(0,1));
			vec4 history3 = isEvenFrame ? imageLoad(AccumulateImage, previpos + ivec2(1,1)) : imageLoad(Accumulate1Image, previpos + ivec2(1,1));

			vec2 subpixel = fract(vec2(ipos) + motion);
			vec4 history = mix(
				mix(history0, history1, subpixel.x),
				mix(history2, history3, subpixel.x),
				subpixel.y
			);
			
			history = max(vec4(0.0), history);
			// judge current gbuffer / object id with prev frame, to deghosting
			float currKeep = src.w / max(1, Camera.TemporalFrames);
			final = mix(history, src, clamp(currKeep,0.0,1.0));
		}
    }
	
    if(isEvenFrame)
    {
        imageStore(Accumulate1Image, ipos, final);
    }
    else
    {
        imageStore(AccumulateImage, ipos, final);
    }

	if(Camera.ShowEdge)
	{
		uint realInstanceId = FetchPrimitiveIndex(current_primitive_index0);
		if(realInstanceId == Camera.SelectedId)
		{
			if( EdgeDetect(current_primitive_index0, isEvenFrame, ipos ) )
			{
				final.rgb = vec3(1,1,0.05) * Camera.PaperWhiteNit;
			}
		}
	}
	
    imageStore(OutImage, ipos, vec4( final.rgb, 1.0 ));
}