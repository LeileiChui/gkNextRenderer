#version 460
#extension GL_GOOGLE_include_directive : require
#extension GL_EXT_ray_query : require
#include "Platform.glsl"
#include "common/Const_Func.glsl"
#include "common/Material.glsl"

layout(binding = 0, set = 0) uniform accelerationStructureEXT Scene;
layout(binding = 1) readonly buffer RayCastInArray { RayCastContext[] RayQuery; };
layout(binding = 2) writeonly buffer RayCastOutArray { RayCastResult[] RayResult; };

layout(local_size_x = 8, local_size_y = 4, local_size_z = 1) in;

void main() {
    RayCastContext context = RayQuery[gl_GlobalInvocationID.x];

    rayQueryEXT rayQuery;
    // gl_RayFlagsTerminateOnFirstHitEXT for fast, but hit not the closet
    rayQueryInitializeEXT(rayQuery, Scene, gl_RayFlagsNoneEXT, 0xFF, context.Origin.xyz, EPS, context.Direction.xyz, INF);

    while( rayQueryProceedEXT(rayQuery) )
    {

    }

    RayCastResult hitResult;
    
    if (rayQueryGetIntersectionTypeEXT(rayQuery, true) == gl_RayQueryCommittedIntersectionTriangleEXT  ) {
        const bool IsCommitted = true;
        const int InstCustIndex = rayQueryGetIntersectionInstanceCustomIndexEXT(rayQuery, IsCommitted);
        const vec3 RayOrigin = context.Origin.xyz;
        const vec3 RayDirection = context.Direction.xyz;
        const float RayDist = rayQueryGetIntersectionTEXT(rayQuery, IsCommitted);
        const mat4x3 WorldToObject = rayQueryGetIntersectionWorldToObjectEXT(rayQuery, IsCommitted);
        const vec2 TwoBaryCoords = rayQueryGetIntersectionBarycentricsEXT(rayQuery, IsCommitted);
        const vec3 HitPos = RayOrigin + RayDirection * RayDist;
        const int PrimitiveIndex = rayQueryGetIntersectionPrimitiveIndexEXT(rayQuery, IsCommitted);
        const int InstanceID = rayQueryGetIntersectionInstanceIdEXT(rayQuery, IsCommitted);

        hitResult.HitPoint = vec4(HitPos, 1.0);
        hitResult.Hitted = 1;
        hitResult.T = RayDist;
    }
    else
    {
        hitResult.Hitted = 0;
    }
    
    RayResult[gl_GlobalInvocationID.x] = hitResult;
}